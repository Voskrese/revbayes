cmake_minimum_required(VERSION 2.6)
project(RevBayes)

# Consider:
# -Wno-sign-compare
# -D_GLIBCXX_DEBUG

# This is the RIGHT way, but requires cmake version >=3:
#   set(CMAKE_CXX_STANDARD 11)
# RHEL 7 compute clusters may have cmake 2.8.12
#
# So, we add the flag directly instead.
set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

if(NOT (${CMAKE_VERSION} VERSION_LESS "2.8.0"))
  find_program(CCACHE_PROGRAM ccache)
  if(CCACHE_PROGRAM)
    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE "${CCACHE_PROGRAM}")
  endif()
endif()

# Add extra CMake libraries into ./CMake
set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/CMake ${CMAKE_MODULE_PATH})

# Set source root relate to project file
set(PROJECT_SOURCE_DIR ${CMAKE_SOURCE_DIR}/../../../src)

if (CMAKE_SYSTEM_PROCESSOR MATCHES "^arm*|aarch64")
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3")
   add_definitions(-DRB_ARM)
else()
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3 -msse -msse2 -msse3")
endif()
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O3")

set(CMAKE_OSX_DEPLOYMENT_TARGET "10.6")
